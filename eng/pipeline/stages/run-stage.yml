# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# This job runs a builder for any OS.

parameters:
  # { id, os, arch, hostArch, config, distro?, fips? }
  builder: {}
  createSourceArchive: false

stages:
  - stage: ${{ parameters.builder.id }}
    # For display name, try for readability. Use some parameters set by
    # shorthand-builders-to-builders.yml that let us add some formatting.
    displayName: ${{ parameters.builder.os }}-${{ parameters.builder.arch }} ${{ parameters.builder.hostParens}} ${{ parameters.builder.config }} ${{ parameters.builder.distroParens}}  ${{ parameters.builder.fipsAcronym }}
    dependsOn: []
    jobs:
      - job: ${{ parameters.builder.id }}
        displayName: ${{ parameters.builder.os }}-${{ parameters.builder.arch }} ${{ parameters.builder.hostParens}} ${{ parameters.builder.config }} ${{ parameters.builder.distroParens}} ${{ parameters.builder.fipsAcronym }}
        workspace:
          clean: all

        ${{ if eq(parameters.builder.config, 'longtest') }}:
          # longtest has been seen to succeed after 53 minutes. Give around 3x headroom. In the future,
          # we should also give the tests a shorter timeout to make sure this doesn't balloon too far:
          # https://github.com/microsoft/go/issues/568
          timeoutInMinutes: 180

        ${{ if eq(parameters.builder.config, 'codeql') }}:
          # Allow CodeQL to take a while. https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#other-issues
          timeoutInMinutes: 360

        ${{ if eq(parameters.builder.os, 'windows') }}:
          pool:
            name: ${{ parameters.dncengPool.name }}
            demands: ${{ parameters.dncengPool.demands.windows }}

        ${{ if eq(parameters.builder.os, 'linux') }}:
          ${{ if eq(parameters.builder.hostArch, 'amd64') }}:
            # Docker host agent.
            pool:
              name: ${{ parameters.dncengPool.name }}
              demands: ${{ parameters.dncengPool.demands.linux }}
            # The image used for the container this job runs in. The tests run in this container, so
            # it should match what we support as closely as possible. Don't use a container for the
            # CodeQL scan build to avoid interfering with the LD_PRELOAD hook.
            ${{ if ne(parameters.builder.config, 'codeql') }}:
              ${{ if eq(parameters.builder.distro, 'ubuntu') }}:
                container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-20211022152710-047508b
              ${{ else }}:
                container: golangpublicimages.azurecr.io/go-infra-images/prereqs:cbl-mariner-1.0.20211027-20211201-0cccc22
          ${{ if eq(parameters.builder.hostArch, 'arm64') }}:
            pool:
              name: Docker-Linux-Arm-Internal
            ${{ if not(parameters.builder.distro) }}:
              container: golangpublicimages.azurecr.io/go-infra-images/prereqs:cbl-mariner-arm64-1.0-20220314-a003148

        variables:
          - group: go-cmdscan-rules
          - ${{ if eq(parameters.builder.config, 'codeql') }}:
            # Enable CodeQL scan and configure options.
            # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#additional-options
            - name: Codeql.Enabled
              value: true
            - name: Codeql.Language
              value: go,cpp
            # Always scan. This way we don't miss out on a release branch build, for example.
            - name: Codeql.Cadence
              value: 0

        steps:
          - ${{ if eq(parameters.builder.os, 'linux') }}:
            # AzDO builds don't seem to set user ID in the running container, so files from a previous
            # build might be owned by root and unable to be cleaned up by AzDO's cleanup step. Clean up
            # the build dirs ourselves in another Docker container to avoid failures.
            - script: |
                set -x
                echo 'Cleaning old build dirs with sudo in case of root ownership.'
                sudo rm -v -rf a b s
                mkdir a b s
              workingDirectory: $(Agent.BuildDirectory)
              displayName: Cleanup

            - template: ../steps/checkout-unix-task.yml
            - template: ../steps/init-pwsh-task.yml

          - ${{ if eq(parameters.builder.os, 'windows') }}:
            - template: ../steps/checkout-windows-task.yml
            - pwsh: |
                Write-Host "Increasing max build retries to mitigate 'Access denied' flakiness during EXE copying on Windows."
                Write-Host "##vso[task.setvariable variable=GO_MAKE_MAX_RETRY_ATTEMPTS]5"
                Write-Host "Increasing max test retries to mitigate access denied issues as well as general test flakiness on Windows."
                Write-Host "##vso[task.setvariable variable=GO_TEST_MAX_RETRY_ATTEMPTS]5"
              displayName: Increase 'make' retry attempts

          # Initialize stage 0 toolset ahead of time so we can track timing data separately from the
          # build operations. When we call this script again later, it won't download Go again.
          - pwsh: |
              . eng/utilities.ps1
              Get-Stage0GoRoot
            displayName: Init stage 0 Go toolset

          - template: ../steps/init-submodule-task.yml

          # Create the source archive on one job only. The os choice is arbitrary.
          - ${{ if and(eq(parameters.createSourceArchive, true), eq(parameters.builder.config, 'buildandpack'), eq(parameters.builder.os, 'linux'), eq(parameters.builder.arch, 'amd64')) }}:
            - pwsh: |
                git config --global user.name "microsoft-golang-bot"
                git config --global user.email "microsoft-golang-bot@users.noreply.github.com"

                # Turn the patches into commits, so HEAD includes the changes.
                eng/run.ps1 submodule-refresh -commits
                eng/run.ps1 pack-source
              displayName: Archive submodule source

          # Manually init (and finalize, later) the CodeQL3000 extension so that it will run on any
          # branch, not just the default.
          # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#how-does-this-extension-work
          - ${{ if eq(parameters.builder.config, 'codeql') }}:
            - task: CodeQL3000Init@0

          - pwsh: |
              # Apply the patches as staged changes, so the HEAD commit is the same as upstream.
              eng/run.ps1 submodule-refresh
            displayName: Apply patches

          - ${{ if ne(parameters.builder.hostArch, parameters.builder.arch) }}:
            - pwsh: Write-Host "##vso[task.setvariable variable=GOARCH]${{ parameters.builder.arch }}"
              displayName: Set GOARCH for cross-compile
            - ${{ if eq(parameters.builder.arch, 'arm') }}:
              - pwsh: Write-Host "##vso[task.setvariable variable=GOARM]6"
                displayName: Set GOARM for cross-compile

          # Use build script directly for "buildandpack". If we used run-builder, we would need to
          # download its external module dependencies.
          - ${{ if eq(parameters.builder.config, 'buildandpack' ) }}:
            - pwsh: |
                eng/run.ps1 cmdscan -envprefix GO_CMDSCAN_RULE_ -- `
                  pwsh eng/run.ps1 build -pack
              displayName: Build and Pack

            - publish: eng/artifacts/bin
              artifact: Binaries ${{ parameters.builder.id }}
              displayName: Pipeline publish
              condition: succeededOrFailed()

          # CodeQL plugs into the compiler to find the code. Just build.
          - ${{ elseif eq(parameters.builder.config, 'codeql' ) }}:
            - pwsh: |
                eng/run.ps1 cmdscan -envprefix GO_CMDSCAN_RULE_ -- `
                  pwsh eng/run.ps1 build
              displayName: Build

          # Use run-builder for any configuration that includes tests. run-builder uses the "gotestsum"
          # module to convert test results to a JUnit file that Azure DevOps can understand.
          - ${{ else }}:
            - pwsh: |
                if ($IsWindows) {
                  Write-Host "Removing Git usr\bin from PATH to avoid running a Linux test that would fail, 'TestScript/script_wait'..."
                  Write-Host $env:PATH
                  $env:PATH = (
                    $env:PATH -split ';' | Where-Object { $_ -ne 'C:\Program Files\Git\usr\bin' }
                  ) -join ';'
                }

                eng/run.ps1 cmdscan -envprefix GO_CMDSCAN_RULE_ -- `
                  pwsh eng/run.ps1 run-builder `
                    -builder '${{ parameters.builder.os }}-${{ parameters.builder.arch }}-${{ parameters.builder.config }}' `
                    $(if ('${{ parameters.builder.fips }}') { '-fipsmode' }) `
                    -junitfile '$(Build.SourcesDirectory)/eng/artifacts/TestResults.xml'
              displayName: Run ${{ parameters.builder.config }}

            - task: PublishTestResults@2
              displayName: Publish test results
              condition: succeededOrFailed()
              inputs:
                testResultsFormat: JUnit
                testResultsFiles: $(Build.SourcesDirectory)/eng/artifacts/TestResults.xml
                testRunTitle: $(System.JobDisplayName)
                buildPlatform: ${{ parameters.builder.arch }}
                buildConfiguration: ${{ parameters.builder.config }}
                publishRunAttachments: true

          - ${{ if eq(parameters.builder.os, 'linux') }}:
            # Files may be owned by root because builds don't set user ID. If this build is running on a
            # persistent machine, later builds may fail to clean up this build's directory as as
            # result--even if it also uses a build container. This step prevents that kind of failure by
            # using chown to make sure the machine's agent user can access/delete the files.
            - script: |
                sudo chown -R $(id -u):$(id -g) *
              workingDirectory: $(Agent.BuildDirectory)
              displayName: Update file ownership from root to build agent account
              continueOnError: true
              condition: succeededOrFailed()

          - ${{ if eq(parameters.builder.config, 'codeql') }}:
            - task: CodeQL3000Finalize@0
